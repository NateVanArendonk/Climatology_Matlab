clearvars

%first load in the data
%dir_nm = '/Users/andrewmcauliffe/Desktop/hourly_data/';
dir_nm = '../../'; % goes back 2 directories, to the desktop directory
file_nm = '/hourly_data/whidbey_hourly'; % you will have to change this variable for each station
load_file = strcat(dir_nm,file_nm);
load(load_file)
clear dir_nm file_nm load_file
wnddir = wnddir';

%% Establish Search parameters 
min_duration = 3; % minimum amount of time a storm can last
min_wndspd = 10; % anything less than 10 m/s I will avoid
min_seperation = 12; % anything not seperated by 12 hours will be considered the same event

%% Find all of storms greater than 10 m/s and lasting 3 or more hours
%----------------10 m/s--------------
wndspd10 = find(wndspd >= min_wndspd); %grab the indices of winds > 10 m/s
breaks = find(diff(wndspd10) ~= 1);  %find where the wind speeds >10 m/s indices
% are not consecutive aka the breaks in the index vector and thus a break
% in intense winds

beg = []; % Vector to contain beginning of storms
fin = []; % Vector to contain all the end locations of storms

% for i = 1:length(breaks)
%     
%     if ismember(breaks(i) + 1, breaks) || ismember(breaks(i) - 1, breaks)  % If a sequential value exists before or after the current indice, this means that it is a single event
%        
%         beg(end+1) = breaks(i);                                            % Add the single event as beginning
%         fin(end+1) = breaks(i);                                            % Add the single event as end
%     
%     else                                                                   % Otherwise, if there is a gap larger than 1, signifying a break in the hourly indices
%         
%         beg(end+1) = breaks(i-1) + 1;                                      % Grab the Start of the event, which is one value greater than the last end point
%         fin(end+1) = breaks(i);                                            % Grab the end of the event which is the current indice
%     end
% end
% 
% % Change to vertical orientation
% beg = beg';
% fin = fin';
% 
% % Combine the two vectors into a single variable
% events = [beg, fin];
% %events = wndspd10(events);
% clear beg fin




for i = 1:length(breaks)    
    if i == 1        
        if ismember(breaks(i) + 1, breaks)    % this is the first value, if the sequential value exists in the second spot, signifying that the event is single            
            beg(end+1) = breaks(i); % Same event so beg and fin are the same
            fin(end+1) = breaks(i);            
        else % Otherwise if the sequential value doesn't exist, such that from 1 - breaks(2) is a event, grab that window        
            beg(end+1) = breaks(i);
            fin(end+1) = breaks(i+1);
        end  
        % This works good
        
        
        
    elseif i > 1 % For all other values after the first indice
        if ismember(breaks(i) + 1, breaks) % if the value 1 larger than the current index exists, we know that the current index is a stopping point, because the next value is a single event
            beg(end+1) = breaks(i-1) + 1; % Grab the starting index which is one after the last stopping point
            fin(end+1) = breaks(i);
            
        elseif ~ismember(breaks(i) + 1, breaks) %If there is no sequential value after this, then we know there is going to be a long event
            
        
        
        
        
        if ismember(breaks(i) + 1, breaks) || ismember(breaks(i) - 1, breaks)  % if any sequential values exist around the current indice           
            beg(end+1) = breaks(i);
            fin(end+1) = breaks(i);           
        else % if no sequential values exist around the current indice    
            beg(end+1) = breaks(i-1) + 1;                                  % Grab the Start of the event, which is one value greater than the last end point
            fin(end+1) = breaks(i);                                        % Grab the end of the event which is the current indice
        end
    end
end
        


% Change to vertical orientation
beg = beg';
fin = fin';
        
% Combine the two vectors into a single variable
events = [beg, fin];    
