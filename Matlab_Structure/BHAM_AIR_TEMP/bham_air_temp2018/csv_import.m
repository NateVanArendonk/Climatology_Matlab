function out = csv_import(input_file)
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/andrewmcauliffe/Desktop/Matlab_Struct/WHIDBEY_SAMPLE/WHIDBEY_SAMPLE_2017.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/03/30 15:13:58

%% Initialize variables.
%filename = '/Users/andrewmcauliffe/Desktop/Matlab_Struct/WHIDBEY_SAMPLE/WHIDBEY_SAMPLE_2017.csv';
file_path = pwd;
filename = strcat(file_path,'/',input_file);


%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%6s%6s%5s%2s%2s%2s%2s%4s%4s%4s%4s%4s%2s%2s%2s%5s%3s%3s%3s%3s%3s%3s%3s%3s%2s%5s%5s%7s%6s%7s%4s%4s%6s%6s%6s%6s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '',  'ReturnOnError', false);

%% Remove white space around all cell columns.
dataArray{10} = strtrim(dataArray{10});
dataArray{12} = strtrim(dataArray{12});
dataArray{13} = strtrim(dataArray{13});
dataArray{14} = strtrim(dataArray{14});
dataArray{15} = strtrim(dataArray{15});
dataArray{17} = strtrim(dataArray{17});
dataArray{18} = strtrim(dataArray{18});
dataArray{19} = strtrim(dataArray{19});
dataArray{20} = strtrim(dataArray{20});
dataArray{21} = strtrim(dataArray{21});
dataArray{22} = strtrim(dataArray{22});
dataArray{23} = strtrim(dataArray{23});
dataArray{24} = strtrim(dataArray{24});
dataArray{25} = strtrim(dataArray{25});
dataArray{31} = strtrim(dataArray{31});
dataArray{32} = strtrim(dataArray{32});
dataArray{34} = strtrim(dataArray{34});
dataArray{35} = strtrim(dataArray{35});
dataArray{36} = strtrim(dataArray{36});
dataArray{37} = strtrim(dataArray{37});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,11,16,26,27,28,29,30,33]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,11,16,26,27,28,29,30,33]);
rawCellColumns = raw(:, [10,12,13,14,15,17,18,19,20,21,22,23,24,25,31,32,34,35,36,37]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
out.USAF = cell2mat(rawNumericColumns(:, 1));
out.WBAN = cell2mat(rawNumericColumns(:, 2));
out.YR = cell2mat(rawNumericColumns(:, 3));
out.MO = cell2mat(rawNumericColumns(:, 4));
out.DA = cell2mat(rawNumericColumns(:, 5));
out.HR = cell2mat(rawNumericColumns(:, 6));
out.MN = cell2mat(rawNumericColumns(:, 7));
out.DIR = cell2mat(rawNumericColumns(:, 8));
out.SPD = cell2mat(rawNumericColumns(:, 9));
out.GUS = rawCellColumns(:, 1);
%CLG = cell2mat(rawNumericColumns(:, 10));
%SKC = rawCellColumns(:, 2);
%L = rawCellColumns(:, 3);
%M = rawCellColumns(:, 4);
%H = rawCellColumns(:, 5);
%VSB = cell2mat(rawNumericColumns(:, 11));
%MW = rawCellColumns(:, 6);
%MW1 = rawCellColumns(:, 7);
%MW2 = rawCellColumns(:, 8);
%MW3 = rawCellColumns(:, 9);
%AW = rawCellColumns(:, 10);
%AW1 = rawCellColumns(:, 11);
%AW2 = rawCellColumns(:, 12);
%AW3 = rawCellColumns(:, 13);
%W = rawCellColumns(:, 14);
out.TEMP = cell2mat(rawNumericColumns(:, 12));
out.DEWP = cell2mat(rawNumericColumns(:, 13));
out.SLP = cell2mat(rawNumericColumns(:, 14));
out.ALT = cell2mat(rawNumericColumns(:, 15));
out.STP = cell2mat(rawNumericColumns(:, 16));
%out.MAX = rawCellColumns(:, 15);
%out.MIN = rawCellColumns(:, 16);
out.PCP01 = cell2mat(rawNumericColumns(:, 17));
out.PCP06 = rawCellColumns(:, 17);
out.PCP24 = rawCellColumns(:, 18);
%PCPXX = rawCellColumns(:, 19);
%SD = rawCellColumns(:, 20);


%% Clear temporary variables
clearvars filename formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;
end